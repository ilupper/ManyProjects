#framed ongoing constructs as loggers, appenders, or layouts
	!# are comment indicators
	#! DEBUG < INFO < WARN < ERROR < FATAL (order of logging levels in relation of logger base level (logger.setLevel(LEVEL.DEBUG)) to the message request level (logger.info("")) )

!Set root logger level to DEBUG and append to A1 and default.file
log4j.rootLogger=WARN, A1, default.file
# Print only messages of level INFO or above in the package com.ilupper.util.collections? + inherits from rootLogger
log4j.logger.com.ilupper.util=INFO, R
# Print only messages of level INFO or above in the name anyPath.anyName? + inherits from rootLogger
#log4j.logger.anyPath.anyName=INFO, R

#FileAppenders
#-------------
!/"path"/"filename" #will write to root of filesystem, or mount point. "filename".log will write to root of classpath
#doesn't require pre-creation

log4j.appender.default.file=org.apache.log4j.FileAppender
log4j.appender.default.file.file=log/base.log
log4j.appender.default.file.layout=org.apache.log4j.PatternLayout
log4j.appender.default.file.layout.ConversionPattern=%-5p %c: %m%n
#log4j.appender.default.file.threshold=INFO #for now, leave it to the rootLogger or logger itself
#log4j.appender.default.file.append=false #in case we want a fresh new file each time

! R is RollingFileAppender (max size of file applicable; new file created when limit reached)
log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R.File=log/rolling.log
# Keep one backup file
log4j.appender.R.MaxBackupIndex=1
log4j.appender.R.MaxFileSize=100KB
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
